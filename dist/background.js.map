{"version":3,"file":"background.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://productivity-analyzer/./public/background.js"],"sourcesContent":["let currentTask = '';\nlet productiveSites = ['github.com', 'stackoverflow.com', 'docs.google.com'];\nlet wastingSites = ['facebook.com', 'twitter.com', 'instagram.com'];\nlet siteTimers = {};\n\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.storage.local.set({ isEnabled: true });\n});\n\nfunction checkForWastingSite(tab) {\n    chrome.storage.local.get(['isEnabled'], (result) => {\n      if (result.isEnabled) {\n        if (tab.url) { // Check if tab.url is defined\n          try {\n            const url = new URL(tab.url);\n            const domain = url.hostname;\n            if (wastingSites.some(site => domain.includes(site))) {\n              chrome.notifications.create({\n                type: 'basic',\n                iconUrl: 'icon128.png',\n                title: 'Productivity Alert',\n                message: \"You're getting distracted!\"\n              });\n            }\n          } catch (error) {\n            console.error('Invalid URL:', tab.url); // Log invalid URLs for debugging\n          }\n        } else {\n          console.warn('Tab URL is undefined:', tab); // Log if tab.url is undefined\n        }\n      }\n    });\n  }\n\n  chrome.tabs.onActivated.addListener((activeInfo) => {\n    chrome.storage.local.get(['isEnabled'], (result) => {\n      if (result.isEnabled) {\n        chrome.tabs.get(activeInfo.tabId, (tab) => {\n          if (tab.url) { // Check if tab.url is defined\n            checkForWastingSite(tab);\n            try {\n              const url = new URL(tab.url);\n              const domain = url.hostname;\n              const now = Date.now();\n              siteTimers[domain] = { startTime: now, totalTime: siteTimers[domain]?.totalTime || 0 };\n            } catch (error) {\n              console.error('Invalid URL on activation:', tab.url);\n            }\n          } else {\n            console.warn('Activated tab has no URL:', tab);\n          }\n        });\n      }\n    });\n  });\n  \n  chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    chrome.storage.local.get(['isEnabled'], (result) => {\n      if (result.isEnabled && changeInfo.status === 'complete' && tab.url) { // Ensure tab.url is defined\n        checkForWastingSite(tab);\n      }\n    });\n  });\n\nchrome.tabs.onRemoved.addListener((tabId, removeInfo) => {\n  updateSiteTime();\n});\n\nfunction updateSiteTime() {\n  const now = Date.now();\n  Object.keys(siteTimers).forEach(domain => {\n    if (siteTimers[domain].startTime) {\n      siteTimers[domain].totalTime += now - siteTimers[domain].startTime;\n      siteTimers[domain].startTime = now;\n    }\n  });\n  chrome.storage.local.set({ siteTimers: siteTimers });\n}\n\nchrome.alarms.create('updateSiteTime', { periodInMinutes: 1 });\nchrome.alarms.onAlarm.addListener((alarm) => {\n  chrome.storage.local.get(['isEnabled'], (result) => {\n    if (result.isEnabled && alarm.name === 'updateSiteTime') {\n      updateSiteTime();\n    }\n  });\n});\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'setTask') {\n    currentTask = request.task;\n    chrome.storage.local.set({ currentTask: currentTask });\n  }\n});"],"names":[],"sourceRoot":""}