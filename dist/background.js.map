{"version":3,"file":"background.js","mappingssources":["webpack://productivity-analyzer/./public/background.js"],"sourcesContent":["let currentTask = '';\nlet productiveSites = ['github.com', 'stackoverflow.com', 'docs.google.com'];\nlet wastingSites = ['facebook.com', 'twitter.com', 'instagram.com'];\nlet siteTimers = {};\n\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.storage.local.set({ isEnabled: true });\n});\n\nfunction checkForWastingSite(tab) {\n    chrome.storage.local.get(['isEnabled'], (result) => {\n      if (result.isEnabled) {\n        if (tab.url) { // Check if tab.url is defined\n          try {\n            const url = new URL(tab.url);\n            const domain = url.hostname;\n            if (wastingSites.some(site => domain.includes(site))) {\n              chrome.notifications.create({\n                type: 'basic',\n                iconUrl: 'icon128.png',\n                title: 'Productivity Alert',\n                message: \"You're getting distracted!\"\n              });\n            }\n          } catch (error) {\n            console.error('Invalid URL:', tab.url); // Log invalid URLs for debugging\n          }\n        } else {\n          console.warn('Tab URL is undefined:', tab); // Log if tab.url is undefined\n        }\n      }\n    });\n  }\n\n  chrome.tabs.onActivated.addListener((activeInfo) => {\n    chrome.storage.local.get(['siteTimers', 'isEnabled'], (result) => {\n      if (result.isEnabled) {\n        siteTimers = result.siteTimers || {}; // Restore from storage\n        chrome.tabs.get(activeInfo.tabId, (tab) => {\n          const url = new URL(tab.url);\n          const domain = url.hostname;\n          const now = Date.now();\n          siteTimers[domain] = { \n            startTime: now, \n            totalTime: siteTimers[domain]?.totalTime || 0 \n          };\n        });\n      }\n    });\n  });\n  \n  chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.status === 'complete') {\n      chrome.storage.local.get(['siteTimers', 'isEnabled'], (result) => {\n        if (result.isEnabled) {\n          siteTimers = result.siteTimers || {}; // Restore from storage\n          checkForWastingSite(tab);\n        }\n      });\n    }\n  });\n\nchrome.tabs.onRemoved.addListener((tabId, removeInfo) => {\n  updateSiteTime();\n});\n\nfunction updateSiteTime() {\n    const now = Date.now();\n    Object.keys(siteTimers).forEach(domain => {\n      if (siteTimers[domain].startTime) {\n        siteTimers[domain].totalTime += now - siteTimers[domain].startTime;\n        siteTimers[domain].startTime = now;\n      }\n    });\n  \n    // Save the updated siteTimers to chrome storage\n    chrome.storage.local.set({ siteTimers: siteTimers }, () => {\n      if (chrome.runtime.lastError) {\n        console.error('Error saving siteTimers:', chrome.runtime.lastError);\n      } else {\n        console.log('siteTimers saved successfully');\n      }\n    });\n  }\n\n  chrome.alarms.create('updateSiteTime', { periodInMinutes: 1 });\n  chrome.alarms.onAlarm.addListener((alarm) => {\n    if (alarm.name === 'updateSiteTime') {\n      chrome.storage.local.get(['isEnabled'], (result) => {\n        if (result.isEnabled) {\n          console.log('Updating site time...');\n          updateSiteTime();\n        }\n      });\n    }\n  });\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'setTask') {\n    currentTask = request.task;\n    chrome.storage.local.set({ currentTask: currentTask });\n  }\n});\n\n"],"names":[],"sourceRoot":""}