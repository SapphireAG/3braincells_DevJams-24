{"version":3,"file":"background.js","mappingssources":["webpack://productivity-analyzer/./public/background.js"],"sourcesContent":["let currentTask = '';\nlet productiveSites = ['github.com', 'stackoverflow.com', 'docs.google.com'];\nlet wastingSites = ['facebook.com', 'twitter.com', 'instagram.com'];\nlet siteTimers = {};\n\n// Function to get data from chrome.storage using Promises\nfunction storageGet(key) {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.get([key], (result) => {\n      if (chrome.runtime.lastError) {\n        console.error(`Error retrieving ${key}:`, chrome.runtime.lastError);\n        reject(chrome.runtime.lastError);\n      } else {\n        console.log(`Successfully retrieved ${key}:`, result[key]);\n        resolve(result[key]);\n      }\n    });\n  });\n}\n\n// Function to set data in chrome.storage using Promises\nfunction storageSet(key, value) {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.set({ [key]: value }, () => {\n      if (chrome.runtime.lastError) {\n        console.error(`Error saving ${key}:`, chrome.runtime.lastError);\n        reject(chrome.runtime.lastError);\n      } else {\n        console.log(`Successfully saved ${key}:`, value);\n        resolve();\n      }\n    });\n  });\n}\n\n// Function to check for wasting site\nfunction checkForWastingSite(tab) {\n  storageGet('isEnabled').then((isEnabled) => {\n    if (isEnabled && tab.url) {\n      try {\n        const url = new URL(tab.url);\n        const domain = url.hostname;\n        if (wastingSites.some(site => domain.includes(site))) {\n          chrome.notifications.create({\n            type: 'basic',\n            iconUrl: 'icon128.png',\n            title: 'Productivity Alert',\n            message: \"You're getting distracted!\"\n          });\n        }\n      } catch (error) {\n        console.error('Invalid URL:', tab.url);\n      }\n    }\n  }).catch(error => {\n    console.error('Error in checking for wasting site:', error);\n  });\n}\n\n// Event listener for when a new tab is created\nchrome.tabs.onCreated.addListener((tab) => {\n  console.log('A new tab has been opened:', tab);\n\n  // Enable the extension functionality when a new tab is created\n  storageSet('isEnabled', true).catch(error => {\n    console.error('Error enabling extension on tab creation:', error);\n  });\n});\n\n// Event listener for tab activation\nchrome.tabs.onActivated.addListener((activeInfo) => {\n  storageGet('isEnabled').then((isEnabled) => {\n    if (isEnabled) {\n      chrome.tabs.get(activeInfo.tabId, (tab) => {\n        if (tab.url) {\n          checkForWastingSite(tab);\n\n          try {\n            const url = new URL(tab.url);\n            const domain = url.hostname;\n            const now = Date.now();\n            siteTimers[domain] = { startTime: now, totalTime: siteTimers[domain]?.totalTime || 0 };\n          } catch (error) {\n            console.error('Invalid URL on activation:', tab.url);\n          }\n        } else {\n          console.warn('Activated tab has no URL:', tab);\n        }\n      });\n    }\n  }).catch(error => {\n    console.error('Error in tab activation listener:', error);\n  });\n});\n\n// Event listener for tab update (when a tab is completely loaded)\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete' && tab.url) {\n    storageGet('isEnabled').then((isEnabled) => {\n      if (isEnabled) {\n        checkForWastingSite(tab);\n      }\n    }).catch(error => {\n      console.error('Error in tab update listener:', error);\n    });\n  }\n});\n\n// Event listener for when a tab is removed\nchrome.tabs.onUpdated.addListener((tabId, removeInfo) => {\n  updateSiteTime().catch(error => {\n    console.error('Error updating site time on tab removal:', error);\n  });\n});\n\n// Function to update site timers and save to storage\nasync function updateSiteTime() {\n  const now = Date.now();\n  for (const domain in siteTimers) {\n    if (siteTimers[domain].startTime) {\n      siteTimers[domain].totalTime += now - siteTimers[domain].startTime;\n      siteTimers[domain].startTime = now;\n    }\n  }\n\n  try {\n    await storageSet('siteTimers', siteTimers);\n  } catch (error) {\n    console.error('Error saving updated site timers:', error);\n  }\n}\n\n// Set an alarm to update site time periodically\nchrome.alarms.create('updateSiteTime', { periodInMinutes: 1/40 });\nchrome.alarms.onAlarm.addListener((alarm) => {\n  if (alarm.name === 'updateSiteTime') {\n    storageGet('isEnabled').then((isEnabled) => {\n      if (isEnabled) {\n        console.log('Updating site time...');\n        updateSiteTime().catch(error => {\n          console.error('Error updating site time on alarm:', error);\n        });\n      }\n    }).catch(error => {\n      console.error('Error in alarm listener:', error);\n    });\n  }\n});\n\n// Handle messages for setting the current task\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'setTask') {\n    currentTask = request.task;\n    storageSet('currentTask', currentTask).catch(error => {\n      console.error('Error setting current task:', error);\n    });\n  }\n});\n\n"],"names":[],"sourceRoot":""}